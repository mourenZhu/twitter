spring:
  application:
    # 应用名称
    name: server-gateway
  cloud:
    # 使用 Naoos 作为服务注册发现
    nacos:
      discovery:
        server-addr: 192.168.3.5:8848
    # 使用 Sentinel 作为熔断器
    sentinel:
      transport:
        port: 8888
        dashboard: 192.168.3.5:8888
    # 路由网关配置
    gateway:
      # 设置与服务注册发现组件结合，这样可以采用服务名的路由策略
      discovery:
        locator:
          enabled: true
      # 配置路由规则
      routes:
        # 采用自定义路由 ID（有固定用法，不同的 id 有不同的功能，详见：https://cloud.spring.io/spring-cloud-gateway/2.0.x/single/spring-cloud-gateway.html#gateway-route-filters）
        #        - id: users
        #          # 采用 LoadBalanceClient 方式请求，以 lb:// 开头，后面的是注册在 Nacos 上的服务名
        #          uri: lb://server-users
        #          # Predicate 翻译过来是“谓词”的意思，必须，主要作用是匹配用户的请求，有很多种用法
        #          predicates:
        #            #
        #            # - Path=/users
        #            # Method 方法谓词，这里是匹配 GET 和 POST 请求
        #            - Method=GET,POST,DELETE
        - id: oauth2
          uri: lb://server-oauth2
          predicates:
            - Method=GET,POST
        #            - Path=/server-oauth2/**
        - id: tweet
          uri: lb://server-tweet
          predicates:
            - Method=GET,POST,PUT,DELETE
        #            - Path=/server-tweet/**
        - id: user
          uri: lb://server-user
          predicates:
            - Method=GET,POST,PUT,DELETE
  #            - Path=/server-user/**
  autoconfigure:
    # TODO: remove when fixed https://github.com/spring-projects/spring-security/issues/6314
    exclude: org.springframework.boot.actuate.autoconfigure.security.reactive.ReactiveManagementWebSecurityAutoConfiguration
  thymeleaf:
    cache: false
  security:
    oauth2:
      client:
        client-id: web
        client-secret: 123456
        authorization-grant-type: authorization_code
        access-token-uri: http://192.168.3.3:8080/server-oauth2/oauth/token
        suser-authorization-uri: http://192.168.3.3:8080/server-oauth2/oauth/authorize
      resource:
        token-info-uri: http://192.168.3.3:8080/server-oauth2/oauth/check_token

  datasource:
    username: root
    password: clear@oauth2
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.3.5:3136/oauth2_cloud?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      minimum-idle: 5
      idle-timeout: 600000
      maximum-pool-size: 10
      auto-commit: true
      pool-name: MyHikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: SELECT 1

server:
  port: 8080

# 目前无效
feign:
  sentinel:
    enabled: true

# 目前无效
management:
  endpoints:
    web:
      exposure:
        include: "*"

# 配置日志级别，方别调试
logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO
    org.springframework.cloud.gateway: TRACE
#    org.springframework.boot.autoconfigure: DEBUG
